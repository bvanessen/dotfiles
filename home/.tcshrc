# Prepends directories to path, if they exist.
#      pathadd /path/to/dir            # add to PATH
# or   pathadd OTHERPATH /path/to/dir  # add to OTHERPATH
alias pathadd 'set _pa_args = (\!*); \\
    set _pa_varname = PATH; \\
    set _pa_new_path = $_pa_args[1]; \\
    [ $#_pa_args -gt 1 ] && \\
        set _pa_varname = $_pa_args[1] && \\
        set _pa_new_path = $_pa_args[2]; \\
    \\
    set _pa_set = 0; \\
    eval if \$\?$_pa_varname set _pa_set=1; \\
    set _pa_old_value = ""; \\
    [ $_pa_set -eq 1 ] && eval set _pa_old_value=\$$_pa_varname; \\
    \\
    eval "if ( -d $_pa_new_path && \:$_pa_old_value\: !~ *\:$_pa_new_path\:* ) then \\
        [ -n "$_pa_old_value" ] && setenv $_pa_varname $_pa_new_path\:$_pa_old_value \\
        [ -z "$_pa_old_value" ] && setenv $_pa_varname $_pa_new_path \\
    endif";'

# Remove duplicate entries from PATH
set _clean_path_awk_cmd = '{for (i=1;i<=NF;i++) { if ( \!x[$i]++ ) printf("%s:",$i); }}'
alias clean_path 'setenv PATH `echo $PATH | awk -F: "$_clean_path_awk_cmd"`'

# Source a file if it exists
alias source_if_exists '[ -f \!:1 ] && source \!:1;'

# Turn on dotkit
source_if_exists /etc/csh.cshrc
source_if_exists /usr/local/tools/dotkit/init.csh

# Turn on ctrl-R history searching like bash.
set autolist=ambiguous:
bindkey -e
bindkey "^R" i-search-back

# Enable saving history
set savehist = 1000

# os specific TERM & ls setup stuff
set OS = `uname -s`

# Determine if shell is interactive
set interactive=false
if ($?prompt) set interactive=true

if ( $interactive == true ) then
    # Pick a good terinal for the machine we're on
    switch ($OS)
    case Linux:
    case Darwin:
        if ( -e /usr/share/terminfo/*/xterm-256color ) then
            setenv TERM xterm-256color
            setenv CLICOLOR YES
        else
            setenv TERM xterm-color
        endif
        breaksw
    case AIX:
        setenv TERM aixterm
        breaksw
    default:
        setenv TERM vt100
        breaksw
    endsw

    # X settings
    [ -f ~/.Xdefaults ] && xrdb ~/.Xdefaults

    # Use an erase character that emacs understands.
    stty erase '^?'

    # Set some limits
#    ulimit -s `ulimit -Hs`
#    ulimit -c `ulimit -Hc`

    set red="%{\033[0;31m%}"
    set cyan="%{\033[0;36m%}"
    set gray="%{\033[1;90m%}"
    set green="%{\033[0;32m%}"
    set ltgreen="%{\033[1;32m%}"
    set ltblue="%{\033[1;34m%}"
    set reset=" %{\033[0m%}"

    # Different color prompts for different types of shells.
    set host_color = "$ltblue"
    if ( "$USER" == "root" ) set host_color = "$red"
    if ($?SLURM_JOBID)       set host_color = "$green"

    set set_title_cmd = "%{\033]0;%M:%~\007%}"
    set prompt="${set_title_cmd}${gray}(${host_color}%m${gray}):${cyan}%c${gray}%%${reset} "
endif

# Default editor is emacs -nw.
setenv EDITOR "emacs -nw"
alias e "$EDITOR"

# Macports setup is only done on Darwin.
if ( "$OS" == 'Darwin' ) then
    setenv MACPORTS_HOME $HOME/macports
    pathadd $MACPORTS_HOME/bin

    # put GNU coreutils in path ahead of BSD tools
    pathadd $MACPORTS_HOME/libexec/gnubin
endif

# Get ls set up with some decent colors.
if { ls --color -d . >&/dev/null } then
    setenv LS_OPTIONS "--color=auto -F -B"
else if { ls -G -d . >&/dev/null } then
    setenv LS_OPTIONS "-G -F"
endif

alias ls 'ls $LS_OPTIONS';
alias ll 'ls -l $L_OPTIONS $LS_OPTIONS';
alias l  ll

if ( -e `which dircolors` ) then
    if ( "$TERM" == "xterm-256color" && -e ~/.dir_colors.256 ) then
        eval `dircolors -c ~/.dir_colors.256`
    else
        eval `dircolors -c ~/.dir_colors`
    endif
endif

# Likewise for grep
setenv GREP_OPTIONS --color=auto

# disable stupid X11 programs that ask for your ssh password
setenv SSH_ASKPASS ""

# Python startup file
setenv PYTHONSTARTUP ~/.python

alias rb   "rm -f *~ .*~ \#* .\#*"
alias f    'finger'
alias more 'less'
alias screen 'screen -R -D'

# Init other config files as necessary.  File should be put in ~/.tcsh.d,
# and can be disabled by putting a ~ anywhere in the name.
# Thanks to http://scottcollins.blogdns.net/journal/
set _extra_scripts = ( $HOME/.tcsh.d/* )
if ( "$_extra_scripts" != "$HOME/.bash.d/\*" ) then
    foreach _script ( $_extra_scripts )
        if ( "$_script" !~ "*~"  ) source $_script
    end
endif

pathadd /usr/sbin
pathadd ${HOME}/sbin
pathadd .
clean_path
